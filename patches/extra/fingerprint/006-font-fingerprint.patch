diff --git a/third_party/blink/renderer/platform/fonts/font_cache.cc b/third_party/blink/renderer/platform/fonts/font_cache.cc
index b078fcd18e..810b433445 100644
--- a/third_party/blink/renderer/platform/fonts/font_cache.cc
+++ b/third_party/blink/renderer/platform/fonts/font_cache.cc
@@ -32,14 +32,17 @@
 #include <limits>
 #include <memory>
 
+#include "base/command_line.h"
 #include "base/debug/alias.h"
 #include "base/feature_list.h"
 #include "base/strings/escape.h"
+#include "base/strings/string_number_conversions.h"
 #include "base/system/sys_info.h"
 #include "base/timer/elapsed_timer.h"
 #include "base/trace_event/process_memory_dump.h"
 #include "base/trace_event/trace_event.h"
 #include "build/build_config.h"
+#include "components/ungoogled/ungoogled_switches.h"
 #include "skia/ext/font_utils.h"
 #include "third_party/blink/public/common/features.h"
 #include "third_party/blink/public/platform/platform.h"
@@ -154,6 +157,46 @@ const FontPlatformData* FontCache::GetFontPlatformData(
     PlatformInit();
   }
 
+  // 获取命令行参数
+  const base::CommandLine* command_line = base::CommandLine::ForCurrentProcess();
+  if (command_line->HasSwitch(switches::kFingerprint)) {
+    // 定义基础字体列表
+    static const char* basic_fonts[] = {
+      "Arial",
+      "Times New Roman",
+      "Courier New",
+      "Georgia",
+      "Verdana"
+    };
+
+    if (creation_params.CreationType() == kCreateFontByFamily) {
+      // 检查是否是基础字体
+      bool is_basic_font = false;
+      for (const char* font : basic_fonts) {
+        if (creation_params.Family() == font) {
+          is_basic_font = true;
+          break;
+        }
+      }
+
+      // 如果不是基础字体，使用fingerprint作为种子进行随机决定
+      if (!is_basic_font) {
+        // 获取fingerprint值作为种子
+        std::string fingerprint = command_line->GetSwitchValueASCII(switches::kFingerprint);
+        uint32_t seed;
+        if (base::StringToUint(fingerprint, &seed)) {
+          uint32_t hash = std::hash<String>{}(creation_params.Family());
+          hash = hash ^ seed;  // 将fingerprint值混入hash
+          
+          // 50%概率不支持这个字体
+          if (hash % 2 == 0) {
+            return nullptr;  // 直接返回nullptr表示不支持该字体
+          }
+        }
+      }
+    }
+  }
+
 #if !BUILDFLAG(IS_MAC)
   if (creation_params.CreationType() == kCreateFontByFamily &&
       creation_params.Family() == font_family_names::kSystemUi) {
