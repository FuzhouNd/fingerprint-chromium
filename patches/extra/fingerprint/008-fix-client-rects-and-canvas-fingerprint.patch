diff --git a/third_party/blink/renderer/core/dom/document.cc b/third_party/blink/renderer/core/dom/document.cc
index ee337ec086..4c89dda26a 100644
--- a/third_party/blink/renderer/core/dom/document.cc
+++ b/third_party/blink/renderer/core/dom/document.cc
@@ -34,6 +34,7 @@
 #include <utility>
 
 #include "base/auto_reset.h"
+#include "base/command_line.h"
 #include "base/containers/adapters.h"
 #include "base/containers/contains.h"
 #include "base/debug/dump_without_crashing.h"
@@ -50,6 +51,7 @@
 #include "cc/animation/animation_timeline.h"
 #include "cc/input/overscroll_behavior.h"
 #include "cc/input/scroll_snap_data.h"
+#include "components/ungoogled/ungoogled_switches.h"
 #include "mojo/public/cpp/bindings/pending_remote.h"
 #include "mojo/public/cpp/bindings/remote.h"
 #include "mojo/public/mojom/base/text_direction.mojom-blink.h"
@@ -854,10 +856,36 @@ Document::Document(const DocumentInit& initializer,
   TRACE_EVENT_WITH_FLOW0("blink", "Document::Document", TRACE_ID_LOCAL(this),
                          TRACE_EVENT_FLAG_FLOW_OUT);
   DCHECK(agent_);
-  if (RuntimeEnabledFeatures::FingerprintingClientRectsNoiseEnabled()) {
-    // Precompute -0.0003% to 0.0003% noise factor for get*ClientRect*() fingerprinting
-    noise_factor_x_ = 1 + (base::RandDouble() - 0.5) * 0.000003;
-    noise_factor_y_ = 1 + (base::RandDouble() - 0.5) * 0.000003;
+    const base::CommandLine* command_line = base::CommandLine::ForCurrentProcess();
+  if (command_line->HasSwitch(switches::kFingerprint)) {
+    std::string seed_str = command_line->GetSwitchValueASCII(switches::kFingerprint);
+    uint32_t seed = static_cast<uint32_t>(std::stoul(seed_str));
+
+    // 使用FNV-1a hash算法生成两个不同的hash值
+    constexpr uint32_t FNV_PRIME = 16777619u;
+    constexpr uint32_t FNV_OFFSET = 2166136261u;
+    
+    // 为x生成hash
+    uint32_t hash_val_x = FNV_OFFSET;
+    hash_val_x ^= seed;
+    hash_val_x *= FNV_PRIME;
+    hash_val_x ^= (seed >> 16);
+    hash_val_x *= FNV_PRIME;
+    
+    // 为y生成不同的hash
+    uint32_t hash_val_y = FNV_OFFSET;
+    hash_val_y ^= ~seed;  // 使用seed的按位取反来生成不同的hash
+    hash_val_y *= FNV_PRIME;
+    hash_val_y ^= (~seed >> 16);
+    hash_val_y *= FNV_PRIME;
+    
+    // 映射到[-0.5, 0.5]范围
+    double norm_x = (hash_val_x & 0xFFFFFFFF) / 4294967295.0 - 0.5;
+    double norm_y = (hash_val_y & 0xFFFFFFFF) / 4294967295.0 - 0.5;
+    
+    // 计算噪声因子
+    noise_factor_x_ = 1.0 + norm_x * 0.000003;
+    noise_factor_y_ = 1.0 + norm_y * 0.000003;
   }
   if (base::FeatureList::IsEnabled(features::kDelayAsyncScriptExecution) &&
       features::kDelayAsyncScriptExecutionDelayByDefaultParam.Get()) {
diff --git a/third_party/blink/renderer/core/dom/element.cc b/third_party/blink/renderer/core/dom/element.cc
index e7edf500b2..6f1132d240 100644
--- a/third_party/blink/renderer/core/dom/element.cc
+++ b/third_party/blink/renderer/core/dom/element.cc
@@ -32,8 +32,10 @@
 #include <memory>
 #include <utility>
 
+#include "base/command_line.h"
 #include "base/feature_list.h"
 #include "cc/input/snap_selection_strategy.h"
+#include "components/ungoogled/ungoogled_switches.h"
 #include "third_party/blink/public/common/features.h"
 #include "third_party/blink/public/common/privacy_budget/identifiability_metric_builder.h"
 #include "third_party/blink/public/common/privacy_budget/identifiability_study_settings.h"
@@ -2529,7 +2531,8 @@ DOMRectList* Element::getClientRects() {
   DCHECK(element_layout_object);
   GetDocument().AdjustQuadsForScrollAndAbsoluteZoom(quads,
                                                     *element_layout_object);
-  if (RuntimeEnabledFeatures::FingerprintingClientRectsNoiseEnabled()) {
+  const base::CommandLine* command_line = base::CommandLine::ForCurrentProcess();
+  if (command_line->HasSwitch(switches::kFingerprint)) {
     for (gfx::QuadF& quad : quads) {
       quad.Scale(GetDocument().GetNoiseFactorX(), GetDocument().GetNoiseFactorY());
     }
@@ -2561,7 +2564,8 @@ gfx::RectF Element::GetBoundingClientRectNoLifecycleUpdate() const {
   DCHECK(element_layout_object);
   GetDocument().AdjustRectForScrollAndAbsoluteZoom(result,
                                                    *element_layout_object);
-  if (RuntimeEnabledFeatures::FingerprintingClientRectsNoiseEnabled()) {
+  const base::CommandLine* command_line = base::CommandLine::ForCurrentProcess();
+  if (command_line->HasSwitch(switches::kFingerprint)) {
     result.Scale(GetDocument().GetNoiseFactorX(), GetDocument().GetNoiseFactorY());
   }
   return result;
diff --git a/third_party/blink/renderer/core/dom/range.cc b/third_party/blink/renderer/core/dom/range.cc
index c0850d3540..72c515fb2e 100644
--- a/third_party/blink/renderer/core/dom/range.cc
+++ b/third_party/blink/renderer/core/dom/range.cc
@@ -23,6 +23,8 @@
  * Boston, MA 02110-1301, USA.
  */
 
+#include "base/command_line.h"
+#include "components/ungoogled/ungoogled_switches.h"
 #include "third_party/blink/renderer/core/dom/range.h"
 
 #include "third_party/blink/renderer/core/display_lock/display_lock_document_state.h"
@@ -1620,7 +1622,8 @@ DOMRectList* Range::getClientRects() const {
   Vector<gfx::QuadF> quads;
   GetBorderAndTextQuads(quads);
 
-  if (RuntimeEnabledFeatures::FingerprintingClientRectsNoiseEnabled()) {
+  const base::CommandLine* command_line = base::CommandLine::ForCurrentProcess();
+  if (command_line->HasSwitch(switches::kFingerprint)) {
     for (gfx::QuadF& quad : quads) {
       quad.Scale(owner_document_->GetNoiseFactorX(), owner_document_->GetNoiseFactorY());
     }
@@ -1634,7 +1637,8 @@ DOMRect* Range::getBoundingClientRect() const {
   // impact is understood.
   SyncScrollAttemptHeuristic::DidAccessScrollOffset();
   auto rect = BoundingRect();
-  if (RuntimeEnabledFeatures::FingerprintingClientRectsNoiseEnabled()) {
+  const base::CommandLine* command_line = base::CommandLine::ForCurrentProcess();
+  if (command_line->HasSwitch(switches::kFingerprint)) {
     rect.Scale(owner_document_->GetNoiseFactorX(), owner_document_->GetNoiseFactorY());
   }
   return DOMRect::FromRectF(rect);
diff --git a/third_party/blink/renderer/modules/canvas/canvas2d/base_rendering_context_2d.cc b/third_party/blink/renderer/modules/canvas/canvas2d/base_rendering_context_2d.cc
index e98f3b8685..7d74290f43 100644
--- a/third_party/blink/renderer/modules/canvas/canvas2d/base_rendering_context_2d.cc
+++ b/third_party/blink/renderer/modules/canvas/canvas2d/base_rendering_context_2d.cc
@@ -26,6 +26,7 @@
 #include "base/check.h"
 #include "base/check_deref.h"
 #include "base/check_op.h"
+#include "base/command_line.h"
 #include "base/compiler_specific.h"
 #include "base/containers/span.h"
 #include "base/feature_list.h"
@@ -46,6 +47,7 @@
 #include "cc/paint/paint_image.h"
 #include "cc/paint/record_paint_canvas.h"
 #include "cc/paint/refcounted_buffer.h"
+#include "components/ungoogled/ungoogled_switches.h"
 #include "components/viz/common/resources/shared_image_format_utils.h"
 #include "gpu/command_buffer/common/shared_image_usage.h"
 #include "gpu/command_buffer/common/sync_token.h"
@@ -2917,7 +2919,9 @@ ImageData* BaseRenderingContext2D::getImageDataInternal(
           snapshot->PaintImageForCurrentFrame().GetSkImageInfo().bounds();
       DCHECK(!bounds.intersect(SkIRect::MakeXYWH(sx, sy, sw, sh)));
     }
-    if (read_pixels_successful && RuntimeEnabledFeatures::FingerprintingCanvasImageDataNoiseEnabled()) {
+
+    const base::CommandLine* command_line = base::CommandLine::ForCurrentProcess();
+    if (read_pixels_successful && command_line->HasSwitch(switches::kFingerprint)) {
       StaticBitmapImage::ShuffleSubchannelColorData(image_data_pixmap.addr(), image_data_pixmap.info(), sx, sy);
     }
   }
@@ -3649,7 +3653,9 @@ TextMetrics* BaseRenderingContext2D::measureText(const String& text) {
                                            GetState().GetTextAlign(), text);
 
   // Scale text metrics if enabled
-  if (RuntimeEnabledFeatures::FingerprintingCanvasMeasureTextNoiseEnabled()) {
+
+  const base::CommandLine* command_line = base::CommandLine::ForCurrentProcess();
+  if (command_line->HasSwitch(switches::kFingerprint)) {
     if (HostAsOffscreenCanvas()) {
       if (auto* window = DynamicTo<LocalDOMWindow>(GetTopExecutionContext())) {
         if (window->GetFrame() && window->GetFrame()->GetDocument())
diff --git a/third_party/blink/renderer/platform/graphics/image_data_buffer.cc b/third_party/blink/renderer/platform/graphics/image_data_buffer.cc
index 7433a890a8..166a1dade9 100644
--- a/third_party/blink/renderer/platform/graphics/image_data_buffer.cc
+++ b/third_party/blink/renderer/platform/graphics/image_data_buffer.cc
@@ -34,10 +34,12 @@
 
 #include <memory>
 
+#include "base/command_line.h"
 #include "base/compiler_specific.h"
 #include "base/memory/ptr_util.h"
 #include "base/rand_util.h"
 #include "base/logging.h"
+#include "components/ungoogled/ungoogled_switches.h"
 #include "third_party/blink/renderer/platform/graphics/static_bitmap_image.h"
 #include "third_party/blink/renderer/platform/image-encoders/image_encoder.h"
 #include "third_party/blink/renderer/platform/runtime_enabled_features.h"
@@ -148,7 +150,8 @@ bool ImageDataBuffer::EncodeImageInternal(const ImageEncodingMimeType mime_type,
                                           const SkPixmap& pixmap) const {
   DCHECK(is_valid_);
 
-  if (RuntimeEnabledFeatures::FingerprintingCanvasImageDataNoiseEnabled()) {
+  const base::CommandLine* command_line = base::CommandLine::ForCurrentProcess();
+  if (command_line->HasSwitch(switches::kFingerprint)) {
     // shuffle subchannel color data within the pixmap
     StaticBitmapImage::ShuffleSubchannelColorData(pixmap_.writable_addr(), pixmap_.info(), 0, 0);
   }
diff --git a/third_party/blink/renderer/platform/graphics/static_bitmap_image.cc b/third_party/blink/renderer/platform/graphics/static_bitmap_image.cc
index 78f821f760..dc85d93b0c 100644
--- a/third_party/blink/renderer/platform/graphics/static_bitmap_image.cc
+++ b/third_party/blink/renderer/platform/graphics/static_bitmap_image.cc
@@ -4,9 +4,11 @@
 
 #include "third_party/blink/renderer/platform/graphics/static_bitmap_image.h"
 
+#include "base/command_line.h"
 #include "base/rand_util.h"
 #include "base/logging.h"
 #include "base/numerics/checked_math.h"
+#include "components/ungoogled/ungoogled_switches.h"
 #include "gpu/command_buffer/client/gles2_interface.h"
 #include "third_party/blink/renderer/platform/graphics/accelerated_static_bitmap_image.h"
 #include "third_party/blink/renderer/platform/graphics/graphics_context.h"
@@ -124,6 +126,25 @@ void StaticBitmapImage::DrawHelper(cc::PaintCanvas* canvas,
 
 #define writable_addr(T, p, stride, x, y) (T*)((const char *)p + y * stride + x * sizeof(T))
 
+// FNV-1a hash 函数实现
+uint32_t GetFNVHash(uint32_t val, uint32_t seed) {
+  constexpr uint32_t FNV_PRIME = 16777619u;
+  constexpr uint32_t FNV_OFFSET = 2166136261u;
+
+  uint32_t hash = FNV_OFFSET;
+  hash ^= seed;
+  hash *= FNV_PRIME;
+  hash ^= val;
+  hash *= FNV_PRIME;
+
+  return hash;
+}
+
+// 生成 0-1 之间的确定性浮点数
+double GetNormalizedHash(uint32_t hash) {
+  return (hash & 0xFFFFFFFF) / 4294967295.0;
+}
+
 void StaticBitmapImage::ShuffleSubchannelColorData(const void *addr, const SkImageInfo& info, int srcX, int srcY) {
   auto w = info.width() - srcX, h = info.height() - srcY;
 
@@ -132,8 +153,17 @@ void StaticBitmapImage::ShuffleSubchannelColorData(const void *addr, const SkIma
     return;
   }
 
-  // generate the first random number here
-  double shuffleX = base::RandDouble();
+  // 获取 fingerprint
+  const base::CommandLine* command_line = base::CommandLine::ForCurrentProcess();
+  uint32_t seed = 0;
+  if (command_line->HasSwitch(switches::kFingerprint)) {
+    std::string seed_str = command_line->GetSwitchValueASCII(switches::kFingerprint);
+    seed = static_cast<uint32_t>(std::stoul(seed_str));
+  }
+
+  // 使用 fingerprint 生成确定性的 X 坐标散列
+  uint32_t hash_x = GetFNVHash(w, seed);
+  double shuffleX = GetNormalizedHash(hash_x);
 
   // cap maximum pixels to change
   auto pixels = (w + h) / 128;
@@ -148,8 +178,9 @@ void StaticBitmapImage::ShuffleSubchannelColorData(const void *addr, const SkIma
 
   DLOG(INFO) << "BRM: ShuffleSubchannelColorData() w=" << w << " h=" << h << " colorType=" << colorType << " fRowBytes=" << fRowBytes;
 
-  // second random number (for y/height)
-  double shuffleY = base::RandDouble();
+  // 生成确定性的 Y 坐标散列
+  uint32_t hash_y = GetFNVHash(h, ~seed);  // 使用 seed 的按位取反来生成不同的散列
+  double shuffleY = GetNormalizedHash(hash_y);
 
   // calculate random coordinates using bisection
   auto currentW = w, currentH = h;
@@ -157,7 +188,7 @@ void StaticBitmapImage::ShuffleSubchannelColorData(const void *addr, const SkIma
     int x = currentW * shuffleX, y = currentH * shuffleY;
 
     // calculate randomisation amounts for each RGB component
-    uint8_t shuffleR = base::RandInt(0, 4);
+    uint8_t shuffleR = seed % 4;
     uint8_t shuffleG = (shuffleR + x) % 4;
     uint8_t shuffleB = (shuffleG + y) % 4;
 
